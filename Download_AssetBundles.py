import os
import requests
import base64
import zlib
from concurrent.futures import ThreadPoolExecutor

def ask_for_server():
    servers = {
        "CN": "cn",
        "HK": "hk",
        "HK akamai": "hkakamai",
    }
    while True:
        print("Please select download server:")
        for i, server in enumerate(servers):
            print(f"{i+1}. {server}")
        server_choice = input()
        try:
            server_choice_int = int(server_choice)
            if server_choice_int > 0 and server_choice_int <= len(servers):
                print(f"Selected {servers[list(servers.keys())[server_choice_int-1]]} ")
                break
            else:
                print("Invalid option")
        except ValueError:
            print("Invalid option")
    return f"https://autopatch{servers[list(servers.keys())[server_choice_int-1]]}.yuanshen.com/"

def ask_for_language():
    languages = {
        1: "Chinese",
        2: "English(US)",
        3: "Japanese",
        4: "Korean"
    }
    while True:
        print("Please select the language of the voice pack:")
        for i, language in languages.items():
            print(f"{i}. {language}")
        language_choice = input()
        try:
            language_choice_int = int(language_choice)
            if language_choice_int > 0 and language_choice_int <= len(languages):
                print(f"Selected {languages[language_choice_int]} ")
                break
            else:
                print("Invalid option")
        except ValueError:
            print("Invalid option")
  
    return languages[language_choice_int]

def download_file(url, dir_path, file_path):
    if os.path.exists(file_path):
        print(f"{file_path} already exists.")
    else:
        print(f"Downloading: {url}")
        response = requests.get(url, headers=headers, stream=True)
        if len(response.text) <= 1024:
            print(f"{url} does not exist.")
            with open("Error.log", "a") as f:
                f.write(f"{url} does not exist.\n")
        else:
            os.makedirs(dir_path, exist_ok=True)
            with open(file_path, "wb") as f:
                f.write(response.content)

def Prepare_for_download():
    server = ask_for_server()
    language = ask_for_language()

    with open(AssetBundles_Download_Path, 'r') as f:
        urls_part = [line.strip() for line in f]

    urls_to_download = []
    for url_part in urls_part:
        url = server + url_part
        if "AudioAssets" in url:
            asset_language = url.split("/")[-2]
            if asset_language == language or asset_language == "AudioAssets":
                urls_to_download.append(url)
        else:
            urls_to_download.append(url)

    with ThreadPoolExecutor(max_workers=3) as executor:
        dir_paths = [os.path.join(download_path, *(url.split("/")[3:-1])) for url in urls_to_download]
        file_paths = [os.path.join(dir_path, url.split("/")[-1]) for dir_path, url in zip(dir_paths, urls_to_download)]
        executor.map(download_file, urls_to_download, dir_paths, file_paths)

def main():
    if not os.path.exists(AssetBundles_Download_Path):
        with open(AssetBundles_Download_Path, "wb") as f:
            decoded = base64.b64decode(encoded_data)
            decompressed = zlib.decompress(decoded)
            f.write(decompressed)

    with open(AssetBundles_Download_Path, "r") as f:
        content = f.read()
    if "client_design_data" not in content or "client_game_res" not in content:
        print("Error: The contents of AssetBundles_Download_Links.txt are invalid")
        exit()
    Prepare_for_download()
    

download_path = os.getcwd()
headers = {"UA": "Genshin Impact/490 CFNetwork/1331.0.7 Darwin/21.4.0", "Accept-Language": "zh-CN"}
AssetBundles_Download_Path = download_path + f'\\AssetBundles_Download_Links.txt'
encoded_data = b''

if __name__ == '__main__':
    main()
